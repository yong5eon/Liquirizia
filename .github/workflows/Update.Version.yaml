name: Update VERSION
on:
  pull_request:
    types:
      - closed
jobs:
  update-version:
    if: github.event.pull_request.merged == true
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{github.event.pull_request.base.ref}}
          fetch-depth: 0
      - name: Show base and merged branch
        run: |
          echo "BASE=${{github.event.pull_request.base.ref}}"
          echo "BASE=${{github.event.pull_request.base.ref}}" >> $GITHUB_ENV
          echo "MERGED=${{github.event.pull_request.head.ref}}"
          echo "MERGED=${{github.event.pull_request.head.ref}}" >> $GITHUB_ENV
      - name: Check Release Note
        run: |
          if [[ "${{env.BASE}}" -eq "master" ]]; then
            if [[ "${{env.MERGED}}" =~ ^(release|rel|feature|feat|bug|fix|hotfix) ]]; then
              if [ ! -f "docs/${{env.MERGED}}" ] then
                echo "Release information file(docs/${{env.MERGED}}) is not found"
                exit 1
           	  fi
            fi
          fi
          RELEASE_NOTE=$(cat docs/${{env.MERGED}})
          echo "$RELEASE_NOTE"
          echo "IS_CHECK_RELEASE_NOTE=true" >> $GITHUB_ENV
      - name: Update VERSION
        if: env.IS_CHECK_RELEASE_NOTE == 'true'
        run: |
          # Check version file
          if [ ! -f "VERSION" ]; then
            echo "VERSION file not found!"
            exit 1
          fi
          # Load current version
          OLD_VERSION=$(cat VERSION)
          if ! [[ "$OLD_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "VERSION file has invalid format: $OLD_VERSION"
            echo "0.0.0" > VERSION
            OLD_VERSION="0.0.0"
          fi
          IFS='.' read -r MAJOR MINOR PATCH <<< "$OLD_VERSION"
          UPDATED=false
          BRANCH=${{github.event.pull_request.head.ref}}
          # Determine update logic based on branch name
          if [[ "$BRANCH" =~ ^(bug|fix|hotfix) ]]; then
            PATCH=$((PATCH + 1))
            UPDATED=true
          elif [[ "$BRANCH" =~ ^(feature|feat) ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0  # Reset PATCH when MINOR is incremented
            UPDATED=true
          else
            echo "No version update needed for branch: $BRANCH"
            exit 0
          fi
          # Write updated version back to file
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "$NEW_VERSION" > VERSION
          echo "Updated VERSION from $OLD_VERSION to $NEW_VERSION"
          echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "UPDATED=$UPDATED" >> $GITHUB_ENV
      - name: Commit and Push Updated VERSION
        if: env.UPDATED == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add VERSION
          git commit -m "Update VERSION from $OLD_VERSION to $NEW_VERSION"
          git push origin ${{github.event.pull_request.base.ref}}
      - name: Create Tag
        if: github.event.pull_request.base.ref == 'master'
        run: |
          # Check version file
          if [ ! -f "VERSION" ]; then
            echo "VERSION file not found!"
            exit 1
          fi
          VERSION=$(cat VERSION)
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a -f "$VERSION" -m "Release - $VERSION"
          git push -f origin "$VERSION"
      - name: Create Change Log
        if: github.event.pull_request.base.ref == 'master'
        run: |
          BRANCH=${{github.event.pull_request.head.ref}}
          CHANGE_LOG=$(cat docs/$BRANCH)
          echo "CHANGE_LOG=$CHANGE_LOG" >> $GITHUB_ENV
      - name: Create Release
        if: github.event.pull_request.base.ref == 'master'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{env.NEW_VERSION}}
          release_name: Release - ${{env.NEW_VERSION}}
          body: ${{env.CHANGE_LOG}}
          draft: false
          prerelease: false
