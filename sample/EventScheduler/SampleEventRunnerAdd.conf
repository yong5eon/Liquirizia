# -*- coding: utf-8 -*-

from Liquirizia.EventRunner import EventRunnerProperties
from Liquirizia.EventRunner.Types import EventInterval
from Liquirizia.EventRunner.Errors import InvalidBodyError

from Liquirizia.Validator import Validator, Error, Pattern
from Liquirizia.Validator.Patterns import *

from SampleEventRunnerAdd import SampleEventRunnerAdd
from SampleErrorFactory import SampleErrorFactory
from SampleEventRunnerComplete import SampleEventRunnerComplete
from SampleEventRunnerError import SampleEventRunnerError


class IsGreaterThan(Pattern):
	def __init__(self, error: Error = None):
		self.error = error
		return

	def __call__(self, parameter):
		if not parameter['a'] < parameter['b']:
			if self.error:
				raise self.error(parameter)
			raise RuntimeError('a must be greater than b')
		return parameter


properties = EventRunnerProperties(
	SampleEventRunnerAdd,
	type=EventInterval('event.sample.compute.add', 3000, headers={'c': 6}, body={'a': 3, 'b': 7}),
	body=Validator(
		IsDictionary({
			'a': Validator(IsInteger(error=SampleErrorFactory('a 는 정수 이어야 합니다.'))),
			'b': Validator(IsInteger(error=SampleErrorFactory('b 는 정수 이어야 합니다.'))),
		}, error=SampleErrorFactory('올바르지 않은 형식 입니다.')),
		IsGreaterThan(error=SampleErrorFactory('b 는 a 보다 커야 합니다.'))
	),
	completes=(
		SampleEventRunnerComplete('event.sample.compute.add.complete.1'),
		SampleEventRunnerComplete('event.sample.compute.add.complete.2'),
	),
	errors=SampleEventRunnerError('event.sample.compute.add.error')
)
